// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMemories(t *testing.T) {
	t.Parallel()

	query := Memories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMemoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Memories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MemoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Memory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MemoryExists to return true, but got false.")
	}
}

func testMemoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	memoryFound, err := FindMemory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if memoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMemoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Memories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMemoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Memories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMemoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	memoryOne := &Memory{}
	memoryTwo := &Memory{}
	if err = randomize.Struct(seed, memoryOne, memoryDBTypes, false, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}
	if err = randomize.Struct(seed, memoryTwo, memoryDBTypes, false, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Memories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMemoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	memoryOne := &Memory{}
	memoryTwo := &Memory{}
	if err = randomize.Struct(seed, memoryOne, memoryDBTypes, false, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}
	if err = randomize.Struct(seed, memoryTwo, memoryDBTypes, false, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func memoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
	*o = Memory{}
	return nil
}

func memoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
	*o = Memory{}
	return nil
}

func memoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
	*o = Memory{}
	return nil
}

func memoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
	*o = Memory{}
	return nil
}

func memoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
	*o = Memory{}
	return nil
}

func memoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
	*o = Memory{}
	return nil
}

func memoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
	*o = Memory{}
	return nil
}

func memoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
	*o = Memory{}
	return nil
}

func memoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
	*o = Memory{}
	return nil
}

func testMemoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Memory{}
	o := &Memory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, memoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Memory object: %s", err)
	}

	AddMemoryHook(boil.BeforeInsertHook, memoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	memoryBeforeInsertHooks = []MemoryHook{}

	AddMemoryHook(boil.AfterInsertHook, memoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	memoryAfterInsertHooks = []MemoryHook{}

	AddMemoryHook(boil.AfterSelectHook, memoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	memoryAfterSelectHooks = []MemoryHook{}

	AddMemoryHook(boil.BeforeUpdateHook, memoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	memoryBeforeUpdateHooks = []MemoryHook{}

	AddMemoryHook(boil.AfterUpdateHook, memoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	memoryAfterUpdateHooks = []MemoryHook{}

	AddMemoryHook(boil.BeforeDeleteHook, memoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	memoryBeforeDeleteHooks = []MemoryHook{}

	AddMemoryHook(boil.AfterDeleteHook, memoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	memoryAfterDeleteHooks = []MemoryHook{}

	AddMemoryHook(boil.BeforeUpsertHook, memoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	memoryBeforeUpsertHooks = []MemoryHook{}

	AddMemoryHook(boil.AfterUpsertHook, memoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	memoryAfterUpsertHooks = []MemoryHook{}
}

func testMemoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(memoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Memories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	memoryDBTypes = map[string]string{`ID`: `integer`, `Author`: `text`, `Content`: `text`, `Append`: `timestamp with time zone`, `Xid`: `text`}
	_             = bytes.MinRead
)

func testMemoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(memoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(memoryAllColumns) == len(memoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMemoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(memoryAllColumns) == len(memoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Memory{}
	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memoryDBTypes, true, memoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(memoryAllColumns, memoryPrimaryKeyColumns) {
		fields = memoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			memoryAllColumns,
			memoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MemorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMemoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(memoryAllColumns) == len(memoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Memory{}
	if err = randomize.Struct(seed, &o, memoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Memory: %s", err)
	}

	count, err := Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, memoryDBTypes, false, memoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Memory: %s", err)
	}

	count, err = Memories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
