// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/bdronneau/memoriesbox/pkg/repositories/models"
	gomock "go.uber.org/mock/gomock"
)

// Repositories is a mock of App interface.
type Repositories struct {
	ctrl     *gomock.Controller
	recorder *RepositoriesMockRecorder
}

// RepositoriesMockRecorder is the mock recorder for Repositories.
type RepositoriesMockRecorder struct {
	mock *Repositories
}

// NewRepositories creates a new mock instance.
func NewRepositories(ctrl *gomock.Controller) *Repositories {
	mock := &Repositories{ctrl: ctrl}
	mock.recorder = &RepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Repositories) EXPECT() *RepositoriesMockRecorder {
	return m.recorder
}

// AddMemory mocks base method.
func (m *Repositories) AddMemory(quote, author string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemory", quote, author, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemory indicates an expected call of AddMemory.
func (mr *RepositoriesMockRecorder) AddMemory(quote, author, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemory", reflect.TypeOf((*Repositories)(nil).AddMemory), quote, author, date)
}

// CountMemories mocks base method.
func (m *Repositories) CountMemories() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMemories")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CountMemories indicates an expected call of CountMemories.
func (mr *RepositoriesMockRecorder) CountMemories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMemories", reflect.TypeOf((*Repositories)(nil).CountMemories))
}

// GetRandomMemories mocks base method.
func (m *Repositories) GetRandomMemories() (models.Memory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomMemories")
	ret0, _ := ret[0].(models.Memory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomMemories indicates an expected call of GetRandomMemories.
func (mr *RepositoriesMockRecorder) GetRandomMemories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomMemories", reflect.TypeOf((*Repositories)(nil).GetRandomMemories))
}

// PingDB mocks base method.
func (m *Repositories) PingDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *RepositoriesMockRecorder) PingDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*Repositories)(nil).PingDB))
}
